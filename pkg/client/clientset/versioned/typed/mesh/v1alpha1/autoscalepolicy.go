/*
 * Copyright (c) 2018 WSO2 Inc. (http:www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cellery-io/mesh-controller/pkg/apis/mesh/v1alpha1"
	scheme "github.com/cellery-io/mesh-controller/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AutoscalePoliciesGetter has a method to return a AutoscalePolicyInterface.
// A group's client should implement this interface.
type AutoscalePoliciesGetter interface {
	AutoscalePolicies(namespace string) AutoscalePolicyInterface
}

// AutoscalePolicyInterface has methods to work with AutoscalePolicy resources.
type AutoscalePolicyInterface interface {
	Create(*v1alpha1.AutoscalePolicy) (*v1alpha1.AutoscalePolicy, error)
	Update(*v1alpha1.AutoscalePolicy) (*v1alpha1.AutoscalePolicy, error)
	UpdateStatus(*v1alpha1.AutoscalePolicy) (*v1alpha1.AutoscalePolicy, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AutoscalePolicy, error)
	List(opts v1.ListOptions) (*v1alpha1.AutoscalePolicyList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AutoscalePolicy, err error)
	AutoscalePolicyExpansion
}

// autoscalePolicies implements AutoscalePolicyInterface
type autoscalePolicies struct {
	client rest.Interface
	ns     string
}

// newAutoscalePolicies returns a AutoscalePolicies
func newAutoscalePolicies(c *MeshV1alpha1Client, namespace string) *autoscalePolicies {
	return &autoscalePolicies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the autoscalePolicy, and returns the corresponding autoscalePolicy object, and an error if there is any.
func (c *autoscalePolicies) Get(name string, options v1.GetOptions) (result *v1alpha1.AutoscalePolicy, err error) {
	result = &v1alpha1.AutoscalePolicy{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AutoscalePolicies that match those selectors.
func (c *autoscalePolicies) List(opts v1.ListOptions) (result *v1alpha1.AutoscalePolicyList, err error) {
	result = &v1alpha1.AutoscalePolicyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested autoscalePolicies.
func (c *autoscalePolicies) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a autoscalePolicy and creates it.  Returns the server's representation of the autoscalePolicy, and an error, if there is any.
func (c *autoscalePolicies) Create(autoscalePolicy *v1alpha1.AutoscalePolicy) (result *v1alpha1.AutoscalePolicy, err error) {
	result = &v1alpha1.AutoscalePolicy{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		Body(autoscalePolicy).
		Do().
		Into(result)
	return
}

// Update takes the representation of a autoscalePolicy and updates it. Returns the server's representation of the autoscalePolicy, and an error, if there is any.
func (c *autoscalePolicies) Update(autoscalePolicy *v1alpha1.AutoscalePolicy) (result *v1alpha1.AutoscalePolicy, err error) {
	result = &v1alpha1.AutoscalePolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		Name(autoscalePolicy.Name).
		Body(autoscalePolicy).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *autoscalePolicies) UpdateStatus(autoscalePolicy *v1alpha1.AutoscalePolicy) (result *v1alpha1.AutoscalePolicy, err error) {
	result = &v1alpha1.AutoscalePolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		Name(autoscalePolicy.Name).
		SubResource("status").
		Body(autoscalePolicy).
		Do().
		Into(result)
	return
}

// Delete takes name of the autoscalePolicy and deletes it. Returns an error if one occurs.
func (c *autoscalePolicies) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *autoscalePolicies) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("autoscalepolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched autoscalePolicy.
func (c *autoscalePolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AutoscalePolicy, err error) {
	result = &v1alpha1.AutoscalePolicy{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("autoscalepolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
